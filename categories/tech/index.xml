<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Darjun Blog</title>
    <link>https://darjun.github.io/categories/tech/</link>
    <description>Recent content in Tech on Darjun Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Aug 2019 22:24:00 +0000</lastBuildDate>
    
	<atom:link href="https://darjun.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入理解Go之generate</title>
      <link>https://darjun.github.io/2019/08/21/golang-generate/</link>
      <pubDate>Wed, 21 Aug 2019 22:24:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/08/21/golang-generate/</guid>
      <description>概述 开发中经常有定义错误码这样的需求，错误码唯一标识具体的错误信息。另外还需要设置每个错误的具体描述。在 HTTP 协议中，200 表示 &amp;ldquo;O</description>
    </item>
    
    <item>
      <title>深入理解Go之==</title>
      <link>https://darjun.github.io/2019/08/20/golang-equal/</link>
      <pubDate>Tue, 20 Aug 2019 12:57:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/08/20/golang-equal/</guid>
      <description>概述 相信==判等操作，大家每天都在用。之前在论坛上看到不少人在问 golang ==比较的结果。看到很多人对 golang 中==的结果不太了解。确实，golang 中对</description>
    </item>
    
    <item>
      <title>ARTS第7周</title>
      <link>https://darjun.github.io/2019/05/07/arts/week7/</link>
      <pubDate>Tue, 07 May 2019 22:30:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/05/07/arts/week7/</guid>
      <description>0 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第六周</title>
      <link>https://darjun.github.io/2019/04/22/arts/week6/</link>
      <pubDate>Mon, 22 Apr 2019 22:47:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/04/22/arts/week6/</guid>
      <description>0 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第五周</title>
      <link>https://darjun.github.io/2019/04/12/arts/week5/</link>
      <pubDate>Fri, 12 Apr 2019 11:05:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/04/12/arts/week5/</guid>
      <description>0 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第四周</title>
      <link>https://darjun.github.io/2019/04/02/arts/week4/</link>
      <pubDate>Tue, 02 Apr 2019 21:47:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/04/02/arts/week4/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第三周</title>
      <link>https://darjun.github.io/2019/03/26/arts/week3/</link>
      <pubDate>Mon, 25 Mar 2019 21:51:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/03/26/arts/week3/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第二周</title>
      <link>https://darjun.github.io/2019/03/19/arts/week2/</link>
      <pubDate>Tue, 19 Mar 2019 22:45:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/03/19/arts/week2/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第一周</title>
      <link>https://darjun.github.io/2019/03/17/arts/week1/</link>
      <pubDate>Sun, 17 Mar 2019 21:42:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/03/17/arts/week1/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>搭建go开发环境</title>
      <link>https://darjun.github.io/2019/01/24/golang-dev-env/</link>
      <pubDate>Mon, 28 Jan 2019 22:05:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/01/24/golang-dev-env/</guid>
      <description>概述 最近发现 visual studio code 很好用。本文介绍在 windows 上基于 visual studio code 搭建一个 go 语言的基本开发环境。 基本软件安装 step 1. 安装 visual studio code： 这个没啥好说的，去官网下载</description>
    </item>
    
    <item>
      <title>深入理解Javascript之Module</title>
      <link>https://darjun.github.io/2018/12/20/javascript-module/</link>
      <pubDate>Thu, 20 Dec 2018 12:10:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/12/20/javascript-module/</guid>
      <description>什么是模块 模块（module）是什么呢？ 模块是为了软件封装，复用。当今开源运动盛行，我们可以很方便地使用别人编写好的模块，而不用自己从头开始</description>
    </item>
    
    <item>
      <title>深入理解Javascript之Execution Context</title>
      <link>https://darjun.github.io/2018/12/03/javascript-execution-context/</link>
      <pubDate>Mon, 03 Dec 2018 22:10:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/12/03/javascript-execution-context/</guid>
      <description>1.概述 执行上下文（Execution Context）是执行 Javascript 代码的环境。可以毫不夸张地说，执行上下文是 Javascript 中最重要的概念。它是其他很多重要概</description>
    </item>
    
    <item>
      <title>深入理解Javascript之CallStack&amp;EventLoop</title>
      <link>https://darjun.github.io/2018/11/23/javascript-callstack-eventloop/</link>
      <pubDate>Fri, 23 Nov 2018 20:57:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/11/23/javascript-callstack-eventloop/</guid>
      <description>1.概述 众所周知，Javascript是一个单线程的语言。这意味着，在Javascript中，同一时间只能做一件事情。 这样的设计有一些优点，</description>
    </item>
    
    <item>
      <title>深入理解Javascript之Promise</title>
      <link>https://darjun.github.io/2018/11/07/javascript-promise-intro/</link>
      <pubDate>Thu, 08 Nov 2018 23:44:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/11/07/javascript-promise-intro/</guid>
      <description>1.概述 相信大家都听过Node中著名的回调地狱（callback hell)。因为Node中的操作默认都是异步执行的，所以需要调用者传入一个回</description>
    </item>
    
    <item>
      <title>Redis源码阅读-skiplist</title>
      <link>https://darjun.github.io/2018/05/24/redis-skiplist/</link>
      <pubDate>Thu, 24 May 2018 09:07:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/05/24/redis-skiplist/</guid>
      <description>概述 跳跃表是zset（有序集合）的基础数据结构。跳跃表可以高效地保持元素有序，并且实现相比平衡树简单、直观。Redis的跳跃表是基于Will</description>
    </item>
    
    <item>
      <title>Redis源码阅读-dict</title>
      <link>https://darjun.github.io/2018/05/23/redis-dict/</link>
      <pubDate>Wed, 23 May 2018 10:05:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/05/23/redis-dict/</guid>
      <description>1.概述 dict是Redis中最重要的数据结构之一。很多结构都使用dict作为基础数据结构，例如hash类型，命令表，SHA1到Lua脚本的</description>
    </item>
    
    <item>
      <title>Redis源码阅读-list</title>
      <link>https://darjun.github.io/2018/05/23/redis-list/</link>
      <pubDate>Tue, 22 May 2018 22:05:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/05/23/redis-list/</guid>
      <description>1.概述 list是一个很常用的数据结构。Redis中实现的list基于双向链表。该实现简单，高效。list是实现其他数据结构的基础结构。 2.</description>
    </item>
    
    <item>
      <title>Redis源码阅读-字符串</title>
      <link>https://darjun.github.io/2018/05/22/redis-sds/</link>
      <pubDate>Tue, 22 May 2018 10:48:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/05/22/redis-sds/</guid>
      <description>目录： 1.概述 2.实现 3.操作 3.1.创建 3.2.销毁 3.3.查询基本信息 3.4.修改 3.5.扩容 3.6.拼接 3.7.拆分 3.8.映射 3.9</description>
    </item>
    
    <item>
      <title>Redis源码阅读</title>
      <link>https://darjun.github.io/2018/05/22/redis-source/</link>
      <pubDate>Tue, 22 May 2018 09:48:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/05/22/redis-source/</guid>
      <description>概述 使用Redis已经有很长一段时间了，期间也阅读过一些源码，但是一直没能坚持读完。最近一段时间比较空闲，下定决心系统地阅读一遍Redis源</description>
    </item>
    
    <item>
      <title>Golang中的BCE优化</title>
      <link>https://darjun.github.io/2018/05/07/bounds-check-elimination/</link>
      <pubDate>Mon, 07 May 2018 11:00:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/05/07/bounds-check-elimination/</guid>
      <description>概述 自Go 1.7以后，标准Go编译器采用了一个新的编译器后端。该后端基于静态单赋值形式（简称SSA）。SSA利用BCE（Bounds Check Eli</description>
    </item>
    
    <item>
      <title>在 Visual Studio Code 中构建一个C&#43;&#43;开发环境</title>
      <link>https://darjun.github.io/2018/03/10/vscode-cpp-env/</link>
      <pubDate>Sat, 10 Mar 2018 11:00:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/03/10/vscode-cpp-env/</guid>
      <description>背景 有时候需要在Windows上编写C++代码，但是已经习惯了linux下vim + gcc/clang，并且不想安装体积庞大的Visual St</description>
    </item>
    
    <item>
      <title>用C&#43;&#43;11实现事件管理器</title>
      <link>https://darjun.github.io/2018/03/09/event-manager/</link>
      <pubDate>Fri, 09 Mar 2018 10:58:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/03/09/event-manager/</guid>
      <description>背景 在游戏开发过程中，经常遇到这样一个问题。现在我们有几个功能系统：任务系统，成就系统等。这些系统都需要处理玩家击杀怪物的事件。通常的做法就</description>
    </item>
    
    <item>
      <title>在Windows上安装Jekyll</title>
      <link>https://darjun.github.io/2018/03/08/install-jekyll-on-windows/</link>
      <pubDate>Wed, 07 Mar 2018 11:18:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/03/08/install-jekyll-on-windows/</guid>
      <description>背景 最近想试试用Jekyll在Github搭建blog。选取网站模板，修改域名等等这些网上都有很详细的教程了，文末会附上链接，这里就不再赘述</description>
    </item>
    
  </channel>
</rss>