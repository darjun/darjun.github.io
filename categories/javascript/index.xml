<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 大俊的博客</title>
    <link>https://darjun.github.io/categories/javascript/</link>
    <description>Recent content in JavaScript on 大俊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>大俊</copyright>
    <lastBuildDate>Thu, 20 Dec 2018 12:10:08 +0000</lastBuildDate><atom:link href="https://darjun.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解Javascript之Module</title>
      <link>https://darjun.github.io/2018/12/20/javascript-module/</link>
      <pubDate>Thu, 20 Dec 2018 12:10:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/12/20/javascript-module/</guid>
      <description>什么是模块 模块（module）是什么呢？ 模块是为了软件封装，复用。当今开源运动盛行，我们可以很方便地使用别人编写好的模块，而不用自己从头开始</description>
    </item>
    
    <item>
      <title>深入理解Javascript之Execution Context</title>
      <link>https://darjun.github.io/2018/12/03/javascript-execution-context/</link>
      <pubDate>Mon, 03 Dec 2018 22:10:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/12/03/javascript-execution-context/</guid>
      <description>1.概述 执行上下文（Execution Context）是执行 Javascript 代码的环境。可以毫不夸张地说，执行上下文是 Javascript 中最重要的概念。它是其他很多重要概</description>
    </item>
    
    <item>
      <title>深入理解Javascript之CallStack&amp;EventLoop</title>
      <link>https://darjun.github.io/2018/11/23/javascript-callstack-eventloop/</link>
      <pubDate>Fri, 23 Nov 2018 20:57:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/11/23/javascript-callstack-eventloop/</guid>
      <description>1.概述 众所周知，Javascript是一个单线程的语言。这意味着，在Javascript中，同一时间只能做一件事情。 这样的设计有一些优点，</description>
    </item>
    
    <item>
      <title>深入理解Javascript之Promise</title>
      <link>https://darjun.github.io/2018/11/07/javascript-promise-intro/</link>
      <pubDate>Thu, 08 Nov 2018 23:44:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/11/07/javascript-promise-intro/</guid>
      <description>1.概述 相信大家都听过Node中著名的回调地狱（callback hell)。因为Node中的操作默认都是异步执行的，所以需要调用者传入一个回</description>
    </item>
    
  </channel>
</rss>
