<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 大俊的博客</title>
    <link>https://darjun.github.io/categories/go/</link>
    <description>Recent content in Go on 大俊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>大俊</copyright>
    <lastBuildDate>Thu, 05 Dec 2019 21:35:01 +0000</lastBuildDate>
    
	<atom:link href="https://darjun.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Web 编程之 程序结构</title>
      <link>https://darjun.github.io/2019/12/05/goweb/structure/</link>
      <pubDate>Thu, 05 Dec 2019 21:35:01 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/05/goweb/structure/</guid>
      <description>概述 一个典型的 Go Web 程序结构如下，摘自《Go Web 编程》： 客户端发送请求； 服务器中的多路复用器收到请求； 多路复用器根据请求的 URL 找到注册的处理器，将</description>
    </item>
    
    <item>
      <title>Go Web 编程之 Hello World</title>
      <link>https://darjun.github.io/2019/11/25/goweb/hello-world/</link>
      <pubDate>Mon, 25 Nov 2019 21:30:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/11/25/goweb/hello-world/</guid>
      <description>概述 计划写一个讲 Go Web 编程的系列文章。从基于 net/http 包编写 Go Web 程序开始，讲述处理器，请求，响应等基础知识。然后到框架的使用。中间会穿插一些源码的分析</description>
    </item>
    
    <item>
      <title>高效生成JSON串——json-gen</title>
      <link>https://darjun.github.io/2019/10/08/golang-json-gen/</link>
      <pubDate>Tue, 08 Oct 2019 12:30:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/10/08/golang-json-gen/</guid>
      <description>概述 游戏服务端的很多操作（包括玩家的和非玩家的）需要传给公司中台收集汇总，根据运营的需求分析数据。中台那边要求传过去的数据为 JSON 格式。一开始我</description>
    </item>
    
    <item>
      <title>深入理解Go之generate</title>
      <link>https://darjun.github.io/2019/08/21/golang-generate/</link>
      <pubDate>Wed, 21 Aug 2019 22:24:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/08/21/golang-generate/</guid>
      <description>概述 开发中经常有定义错误码这样的需求，错误码唯一标识具体的错误信息。另外还需要设置每个错误的具体描述。在 HTTP 协议中，200 表示 &amp;ldquo;O</description>
    </item>
    
    <item>
      <title>深入理解Go之==</title>
      <link>https://darjun.github.io/2019/08/20/golang-equal/</link>
      <pubDate>Tue, 20 Aug 2019 12:57:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/08/20/golang-equal/</guid>
      <description>概述 相信==判等操作，大家每天都在用。之前在论坛上看到不少人在问 golang ==比较的结果。看到很多人对 golang 中==的结果不太了解。确实，golang 中对</description>
    </item>
    
    <item>
      <title>搭建go开发环境</title>
      <link>https://darjun.github.io/2019/01/24/golang-dev-env/</link>
      <pubDate>Mon, 28 Jan 2019 22:05:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/01/24/golang-dev-env/</guid>
      <description>概述 最近发现 visual studio code 很好用。本文介绍在 windows 上基于 visual studio code 搭建一个 go 语言的基本开发环境。 基本软件安装 step 1. 安装 visual studio code： 这个没啥好说的，去官网下载</description>
    </item>
    
    <item>
      <title>深入理解Go之BCE优化</title>
      <link>https://darjun.github.io/2018/05/07/bounds-check-elimination/</link>
      <pubDate>Mon, 07 May 2018 11:00:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/05/07/bounds-check-elimination/</guid>
      <description>概述 自Go 1.7以后，标准Go编译器采用了一个新的编译器后端。该后端基于静态单赋值形式（简称SSA）。SSA利用BCE（Bounds Check Eli</description>
    </item>
    
  </channel>
</rss>