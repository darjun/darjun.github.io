<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 大俊的博客</title>
    <link>https://darjun.github.io/categories/go/</link>
    <description>Recent content in Go on 大俊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>大俊</copyright>
    <lastBuildDate>Sat, 22 Feb 2020 12:40:23 +0000</lastBuildDate>
    
	<atom:link href="https://darjun.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 每日一库之 dig</title>
      <link>https://darjun.github.io/2020/02/22/godailylib/dig/</link>
      <pubDate>Sat, 22 Feb 2020 12:40:23 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/02/22/godailylib/dig/</guid>
      <description>简介 今天我们来介绍 Go 语言的一个依赖注入（DI）库——dig。dig 是 uber 开源的库。Java 依赖注入的库有很多，相信即使不是做 Java 开发的童鞋也听过</description>
    </item>
    
    <item>
      <title>Go 每日一库之 email</title>
      <link>https://darjun.github.io/2020/02/16/godailylib/email/</link>
      <pubDate>Sun, 16 Feb 2020 07:56:23 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/02/16/godailylib/email/</guid>
      <description>简介 程序中时常有发送邮件的需求。有异常情况了需要通知管理员和负责人，用户下单后可能需要通知订单信息，电商平台、中国移动和联通都有每月账单，这</description>
    </item>
    
    <item>
      <title>Go 每日一库之 carbon</title>
      <link>https://darjun.github.io/2020/02/14/godailylib/carbon/</link>
      <pubDate>Fri, 14 Feb 2020 21:12:23 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/02/14/godailylib/carbon/</guid>
      <description>简介 一线开发人员每天都要使用日期和时间相关的功能，各种定时器，活动时间处理等。标准库time使用起来不太灵活，特别是日期时间的创建和运算。c</description>
    </item>
    
    <item>
      <title>Go 每日一库之 godotenv</title>
      <link>https://darjun.github.io/2020/02/12/godailylib/godotenv/</link>
      <pubDate>Wed, 12 Feb 2020 20:45:23 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/02/12/godailylib/godotenv/</guid>
      <description>简介 twelve-factor应用提倡将配置存储在环境变量中。任何从开发环境切换到生产环境时需要修改的东西都从代码抽取到环境变量里。 但是在实</description>
    </item>
    
    <item>
      <title>Go 每日一库之 logrus</title>
      <link>https://darjun.github.io/2020/02/07/godailylib/logrus/</link>
      <pubDate>Fri, 07 Feb 2020 20:34:23 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/02/07/godailylib/logrus/</guid>
      <description>简介 前一篇文章介绍了 Go 标准库中的日志库 log。最后我们也提到，log库只提供了三组接口，功能过于简单了。 今天，我们来介绍一个日志库中的“明星</description>
    </item>
    
    <item>
      <title>Go 每日一库之 log</title>
      <link>https://darjun.github.io/2020/02/07/godailylib/log/</link>
      <pubDate>Fri, 07 Feb 2020 10:30:23 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/02/07/godailylib/log/</guid>
      <description>简介 在日常开发中，日志是必不可少的功能。虽然有时可以用fmt库输出一些信息，但是灵活性不够。Go 标准库提供了一个日志库log。本文介绍log</description>
    </item>
    
    <item>
      <title>Go 每日一库之 cast</title>
      <link>https://darjun.github.io/2020/01/20/godailylib/cast/</link>
      <pubDate>Sat, 18 Jan 2020 21:08:05 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/20/godailylib/cast/</guid>
      <description>简介 今天我们再来介绍 spf13 大神的另一个库cast。cast是一个小巧、实用的类型转换库，用于将一个类型转为另一个类型。 最初开发cast是用在hu</description>
    </item>
    
    <item>
      <title>Go 每日一库之 fsnotify</title>
      <link>https://darjun.github.io/2020/01/19/godailylib/fsnotify/</link>
      <pubDate>Sat, 18 Jan 2020 21:08:05 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/19/godailylib/fsnotify/</guid>
      <description>简介 上一篇文章Go 每日一库之 viper中，我们介绍了 viper 可以监听文件修改进而自动重新加载。 其内部使用的就是fsnotify这个库，它是跨平台的</description>
    </item>
    
    <item>
      <title>Go 每日一库之 viper</title>
      <link>https://darjun.github.io/2020/01/18/godailylib/viper/</link>
      <pubDate>Sat, 18 Jan 2020 21:08:05 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/18/godailylib/viper/</guid>
      <description>简介 上一篇文章介绍 cobra 的时候提到了 viper，今天我们就来介绍一下这个库。 viper 是一个配置解决方案，拥有丰富的特性： 支持 JSON/TOML/YAML/HCL/envfile/Java properties 等多种格式的配置文件；</description>
    </item>
    
    <item>
      <title>Go 每日一库之 cobra</title>
      <link>https://darjun.github.io/2020/01/17/godailylib/cobra/</link>
      <pubDate>Fri, 17 Jan 2020 22:13:05 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/17/godailylib/cobra/</guid>
      <description>简介 cobra是一个命令行程序库，可以用来编写命令行程序。同时，它也提供了一个脚手架， 用于生成基于 cobra 的应用程序框架。非常多知名的开源项目使用</description>
    </item>
    
    <item>
      <title>Go Web 编程之 数据库</title>
      <link>https://darjun.github.io/2020/01/16/goweb/db/</link>
      <pubDate>Thu, 16 Jan 2020 06:15:36 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/16/goweb/db/</guid>
      <description>概述 数据库用来存储数据。只要不是玩具项目，每个项目都需要用到数据库。现在用的最多的还是 MySQL，PostgreSQL的使用也在快速增长中。</description>
    </item>
    
    <item>
      <title>Go 每日一库之 go-ini</title>
      <link>https://darjun.github.io/2020/01/15/godailylib/go-ini/</link>
      <pubDate>Wed, 15 Jan 2020 22:33:05 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/15/godailylib/go-ini/</guid>
      <description>简介 ini 是 Windows 上常用的配置文件格式。MySQL 的 Windows 版就是使用 ini 格式存储配置的。 go-ini是 Go 语言中用于操作 ini 文件的第三方库。 本文介绍go-in</description>
    </item>
    
    <item>
      <title>Go 每日一库之 go-homedir</title>
      <link>https://darjun.github.io/2020/01/14/godailylib/go-homedir/</link>
      <pubDate>Tue, 14 Jan 2020 07:33:05 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/14/godailylib/go-homedir/</guid>
      <description>简介 今天我们来看一个很小，很实用的库go-homedir。顾名思义，go-homedir用来获取用户的主目录。 实际上，使用标准库os/use</description>
    </item>
    
    <item>
      <title>Go Web 编程之 静态文件</title>
      <link>https://darjun.github.io/2020/01/13/goweb/fileserver/</link>
      <pubDate>Mon, 13 Jan 2020 06:15:36 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/13/goweb/fileserver/</guid>
      <description>概述 在 Web 开发中，需要处理很多静态资源文件，如 css/js 和图片文件等。本文将介绍在 Go 语言中如何处理文件请求。 接下来，我们将介绍两种处理文件请求的方式：</description>
    </item>
    
    <item>
      <title>Go 每日一库之 go-flags</title>
      <link>https://darjun.github.io/2020/01/10/godailylib/go-flags/</link>
      <pubDate>Sun, 12 Jan 2020 21:04:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/10/godailylib/go-flags/</guid>
      <description>简介 在上一篇文章中，我们介绍了flag库。flag库是用于解析命令行选项的。但是flag有几个缺点： 不显示支持短选项。当然上一篇文章中也提到</description>
    </item>
    
    <item>
      <title>Go 每日一库之 flag</title>
      <link>https://darjun.github.io/2020/01/10/godailylib/flag/</link>
      <pubDate>Fri, 10 Jan 2020 22:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/10/godailylib/flag/</guid>
      <description>缘起 我一直在想，有什么方式可以让人比较轻易地保持每日学习，持续输出的状态。写博客是一种方式，但不是每天都有想写的，值得写的东西。 有时候一个技</description>
    </item>
    
    <item>
      <title>Go Web 编程之 模板（二）</title>
      <link>https://darjun.github.io/2020/01/09/goweb/template2/</link>
      <pubDate>Thu, 09 Jan 2020 21:31:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/09/goweb/template2/</guid>
      <description>概述 在上一篇文章中，我们介绍了 Go 模板库text/template。 text/template库用于生成文本输出。在 Web 开发中，涉及到很多安全方</description>
    </item>
    
    <item>
      <title>Go Web 编程之 模板（一）</title>
      <link>https://darjun.github.io/2019/12/31/goweb/template1/</link>
      <pubDate>Tue, 31 Dec 2019 22:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/31/goweb/template1/</guid>
      <description>概述 模板引擎是 Web 编程中必不可少的一个组件。模板能分离逻辑和数据，使得逻辑简洁清晰，并且模板可复用。引用第二篇文章《程序结构》一文中的图示，我</description>
    </item>
    
    <item>
      <title>Go Web 编程之 响应</title>
      <link>https://darjun.github.io/2019/12/18/goweb/response/</link>
      <pubDate>Wed, 18 Dec 2019 21:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/18/goweb/response/</guid>
      <description>概述 上一篇文章中，我们介绍了请求的结构与处理。本文将详细介绍如何响应客户端的请求。其实在前面几篇文章中，我们已经使用过响应的功能——通过ht</description>
    </item>
    
    <item>
      <title>Go Web 编程之 请求</title>
      <link>https://darjun.github.io/2019/12/09/goweb/request/</link>
      <pubDate>Fri, 13 Dec 2019 22:05:01 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/09/goweb/request/</guid>
      <description>概述 前面我们学习了处理器和处理器函数，如何编写和注册处理器。本文我们将学习如何从请求中获取信息。 请求的结构 通过前面的学习，我们知道处理器函数</description>
    </item>
    
  </channel>
</rss>