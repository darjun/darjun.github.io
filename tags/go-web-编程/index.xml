<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Web 编程 on 大俊的博客</title>
    <link>https://darjun.github.io/tags/go-web-%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in Go Web 编程 on 大俊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>大俊</copyright>
    <lastBuildDate>Thu, 09 Jan 2020 21:31:43 +0000</lastBuildDate>
    
	<atom:link href="https://darjun.github.io/tags/go-web-%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Web 编程之 模板（二）</title>
      <link>https://darjun.github.io/2020/01/09/goweb/template2/</link>
      <pubDate>Thu, 09 Jan 2020 21:31:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/09/goweb/template2/</guid>
      <description>概述 在上一篇文章中，我们介绍了 Go 模板库text/template。 text/template库用于生成文本输出。在 Web 开发中，涉及到很多安全方</description>
    </item>
    
    <item>
      <title>Go Web 编程之 模板（一）</title>
      <link>https://darjun.github.io/2019/12/31/goweb/template1/</link>
      <pubDate>Tue, 31 Dec 2019 22:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/31/goweb/template1/</guid>
      <description>概述 模板引擎是 Web 编程中必不可少的一个组件。模板能分离逻辑和数据，使得逻辑简洁清晰，并且模板可复用。引用第二篇文章《程序结构》一文中的图示，我</description>
    </item>
    
    <item>
      <title>Go Web 编程之 响应</title>
      <link>https://darjun.github.io/2019/12/18/goweb/response/</link>
      <pubDate>Wed, 18 Dec 2019 21:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/18/goweb/response/</guid>
      <description>概述 上一篇文章中，我们介绍了请求的结构与处理。本文将详细介绍如何响应客户端的请求。其实在前面几篇文章中，我们已经使用过响应的功能——通过ht</description>
    </item>
    
    <item>
      <title>Go Web 编程之 请求</title>
      <link>https://darjun.github.io/2019/12/09/goweb/request/</link>
      <pubDate>Fri, 13 Dec 2019 22:05:01 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/09/goweb/request/</guid>
      <description>概述 前面我们学习了处理器和处理器函数，如何编写和注册处理器。本文我们将学习如何从请求中获取信息。 请求的结构 通过前面的学习，我们知道处理器函数</description>
    </item>
    
    <item>
      <title>Go Web 编程之 程序结构</title>
      <link>https://darjun.github.io/2019/12/05/goweb/structure/</link>
      <pubDate>Thu, 05 Dec 2019 21:35:01 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/05/goweb/structure/</guid>
      <description>概述 一个典型的 Go Web 程序结构如下，摘自《Go Web 编程》： 客户端发送请求； 服务器中的多路复用器收到请求； 多路复用器根据请求的 URL 找到注册的处理器，将</description>
    </item>
    
    <item>
      <title>Go Web 编程之 Hello World</title>
      <link>https://darjun.github.io/2019/11/25/goweb/hello-world/</link>
      <pubDate>Mon, 25 Nov 2019 21:30:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/11/25/goweb/hello-world/</guid>
      <description>概述 计划写一个讲 Go Web 编程的系列文章。从基于 net/http 包编写 Go Web 程序开始，讲述处理器，请求，响应等基础知识。然后到框架的使用。中间会穿插一些源码的分析</description>
    </item>
    
  </channel>
</rss>