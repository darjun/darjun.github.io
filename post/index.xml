<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 大俊的博客</title>
    <link>https://darjun.github.io/post/</link>
    <description>Recent content in Posts on 大俊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>大俊</copyright>
    <lastBuildDate>Sun, 12 Jan 2020 21:04:43 +0000</lastBuildDate>
    
	<atom:link href="https://darjun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 每日一库之 go-flags</title>
      <link>https://darjun.github.io/2020/01/10/godailylib/go-flags/</link>
      <pubDate>Sun, 12 Jan 2020 21:04:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/10/godailylib/go-flags/</guid>
      <description>简介 在上一篇文章中，我们介绍了flag库。flag库是用于解析命令行选项的。但是flag有几个缺点： 不显示支持短选项。当然上一篇文章中也提到</description>
    </item>
    
    <item>
      <title>Go 每日一库之 flag</title>
      <link>https://darjun.github.io/2020/01/10/godailylib/flag/</link>
      <pubDate>Fri, 10 Jan 2020 22:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/10/godailylib/flag/</guid>
      <description>缘起 我一直在想，有什么方式可以让人比较轻易地保持每日学习，持续输出的状态。写博客是一种方式，但不是每天都有想写的，值得写的东西。 有时候一个技</description>
    </item>
    
    <item>
      <title>Go Web 编程之 模板（二）</title>
      <link>https://darjun.github.io/2020/01/09/goweb/template2/</link>
      <pubDate>Thu, 09 Jan 2020 21:31:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2020/01/09/goweb/template2/</guid>
      <description>概述 在上一篇文章中，我们介绍了 Go 模板库text/template。 text/template库用于生成文本输出。在 Web 开发中，涉及到很多安全方</description>
    </item>
    
    <item>
      <title>Go Web 编程之 模板（一）</title>
      <link>https://darjun.github.io/2019/12/31/goweb/template1/</link>
      <pubDate>Tue, 31 Dec 2019 22:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/31/goweb/template1/</guid>
      <description>概述 模板引擎是 Web 编程中必不可少的一个组件。模板能分离逻辑和数据，使得逻辑简洁清晰，并且模板可复用。引用第二篇文章《程序结构》一文中的图示，我</description>
    </item>
    
    <item>
      <title>Go Web 编程之 响应</title>
      <link>https://darjun.github.io/2019/12/18/goweb/response/</link>
      <pubDate>Wed, 18 Dec 2019 21:41:43 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/18/goweb/response/</guid>
      <description>概述 上一篇文章中，我们介绍了请求的结构与处理。本文将详细介绍如何响应客户端的请求。其实在前面几篇文章中，我们已经使用过响应的功能——通过ht</description>
    </item>
    
    <item>
      <title>Go Web 编程之 请求</title>
      <link>https://darjun.github.io/2019/12/09/goweb/request/</link>
      <pubDate>Fri, 13 Dec 2019 22:05:01 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/09/goweb/request/</guid>
      <description>概述 前面我们学习了处理器和处理器函数，如何编写和注册处理器。本文我们将学习如何从请求中获取信息。 请求的结构 通过前面的学习，我们知道处理器函数</description>
    </item>
    
    <item>
      <title>Go Web 编程之 程序结构</title>
      <link>https://darjun.github.io/2019/12/05/goweb/structure/</link>
      <pubDate>Thu, 05 Dec 2019 21:35:01 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/12/05/goweb/structure/</guid>
      <description>概述 一个典型的 Go Web 程序结构如下，摘自《Go Web 编程》： 客户端发送请求； 服务器中的多路复用器收到请求； 多路复用器根据请求的 URL 找到注册的处理器，将</description>
    </item>
    
    <item>
      <title>Go Web 编程之 Hello World</title>
      <link>https://darjun.github.io/2019/11/25/goweb/hello-world/</link>
      <pubDate>Mon, 25 Nov 2019 21:30:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/11/25/goweb/hello-world/</guid>
      <description>概述 计划写一个讲 Go Web 编程的系列文章。从基于 net/http 包编写 Go Web 程序开始，讲述处理器，请求，响应等基础知识。然后到框架的使用。中间会穿插一些源码的分析</description>
    </item>
    
    <item>
      <title>生成排列的算法汇总</title>
      <link>https://darjun.github.io/2019/10/15/algorithm/permutation/</link>
      <pubDate>Tue, 15 Oct 2019 12:30:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/10/15/algorithm/permutation/</guid>
      <description>概述 我觉得自己的算法思维能力有些薄弱，所以基本上每天晚上都会抽空做1-2到 leetcode 算法题。这两天遇到一个排列的问题——Next Permutatio</description>
    </item>
    
    <item>
      <title>高效生成JSON串——json-gen</title>
      <link>https://darjun.github.io/2019/10/08/golang-json-gen/</link>
      <pubDate>Tue, 08 Oct 2019 12:30:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/10/08/golang-json-gen/</guid>
      <description>概述 游戏服务端的很多操作（包括玩家的和非玩家的）需要传给公司中台收集汇总，根据运营的需求分析数据。中台那边要求传过去的数据为 JSON 格式。一开始我</description>
    </item>
    
    <item>
      <title>深入理解Go之generate</title>
      <link>https://darjun.github.io/2019/08/21/golang-generate/</link>
      <pubDate>Wed, 21 Aug 2019 22:24:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/08/21/golang-generate/</guid>
      <description>概述 开发中经常有定义错误码这样的需求，错误码唯一标识具体的错误信息。另外还需要设置每个错误的具体描述。在 HTTP 协议中，200 表示 &amp;ldquo;O</description>
    </item>
    
    <item>
      <title>深入理解Go之==</title>
      <link>https://darjun.github.io/2019/08/20/golang-equal/</link>
      <pubDate>Tue, 20 Aug 2019 12:57:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/08/20/golang-equal/</guid>
      <description>概述 相信==判等操作，大家每天都在用。之前在论坛上看到不少人在问 golang ==比较的结果。看到很多人对 golang 中==的结果不太了解。确实，golang 中对</description>
    </item>
    
    <item>
      <title>ARTS第六周</title>
      <link>https://darjun.github.io/2019/04/22/arts/week6/</link>
      <pubDate>Mon, 22 Apr 2019 22:47:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/04/22/arts/week6/</guid>
      <description>0 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第五周</title>
      <link>https://darjun.github.io/2019/04/12/arts/week5/</link>
      <pubDate>Fri, 12 Apr 2019 11:05:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/04/12/arts/week5/</guid>
      <description>0 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第四周</title>
      <link>https://darjun.github.io/2019/04/02/arts/week4/</link>
      <pubDate>Tue, 02 Apr 2019 21:47:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/04/02/arts/week4/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第三周</title>
      <link>https://darjun.github.io/2019/03/26/arts/week3/</link>
      <pubDate>Mon, 25 Mar 2019 21:51:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/03/26/arts/week3/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第二周</title>
      <link>https://darjun.github.io/2019/03/19/arts/week2/</link>
      <pubDate>Tue, 19 Mar 2019 22:45:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/03/19/arts/week2/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>ARTS第一周</title>
      <link>https://darjun.github.io/2019/03/17/arts/week1/</link>
      <pubDate>Sun, 17 Mar 2019 21:42:00 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/03/17/arts/week1/</guid>
      <description>1 概述 ARTS 是耗子叔发起的编程挑战： 每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一</description>
    </item>
    
    <item>
      <title>搭建go开发环境</title>
      <link>https://darjun.github.io/2019/01/24/golang-dev-env/</link>
      <pubDate>Mon, 28 Jan 2019 22:05:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2019/01/24/golang-dev-env/</guid>
      <description>概述 最近发现 visual studio code 很好用。本文介绍在 windows 上基于 visual studio code 搭建一个 go 语言的基本开发环境。 基本软件安装 step 1. 安装 visual studio code： 这个没啥好说的，去官网下载</description>
    </item>
    
    <item>
      <title>深入理解Javascript之Module</title>
      <link>https://darjun.github.io/2018/12/20/javascript-module/</link>
      <pubDate>Thu, 20 Dec 2018 12:10:08 +0000</pubDate>
      
      <guid>https://darjun.github.io/2018/12/20/javascript-module/</guid>
      <description>什么是模块 模块（module）是什么呢？ 模块是为了软件封装，复用。当今开源运动盛行，我们可以很方便地使用别人编写好的模块，而不用自己从头开始</description>
    </item>
    
  </channel>
</rss>